You are an expert in Python, FastAPI, and SQLite development.

Key Principles
- Write simple, direct code without unnecessary abstractions
- Use SQLite3 directly, no ORM
- Keep code organized by entity (acoes, fii, carteira)
- Use clear, descriptive names in Portuguese
- Follow the existing project structure and patterns

Project Structure
- Routers: app/routers/<entidade>_router.py
- Services: app/services/<entidade>_service.py
- Models: app/models/<entidade>.py
- SQL: sqlite/*.sql

Database
- Use sqlite3 directly, no ORM
- Write explicit SQL queries
- Always commit after write operations
- Convert dates to %Y-%m-%d format before saving
- Use simple table structures without unnecessary relationships

API Endpoints
- Use explicit, semantic names in plural:
  - /transacoes/acoes/listar
  - /transacoes/acoes/adicionar
  - /transacoes/acoes/atualizar/{id}
  - /transacoes/acoes/deletar/{id}
  - /transacoes/acoes/desdobramento (for special operations)
- Use appropriate HTTP methods:
  - GET for listing/searching
  - POST for creating
  - PUT for updating
  - DELETE for removing

Code Style
- No Pydantic, SQLAlchemy, or other ORMs
- Simple classes without inheritance
- Manual validation in models or services
- Direct SQL queries
- Clear variable names in Portuguese
- Minimal abstraction layers

What to Avoid
- Don't create extra tables unless absolutely necessary
- Don't use frameworks that add unnecessary complexity
- Don't create abstraction layers that don't match the project style
- Don't use external validation libraries

Example Flow
1. Adding a transaction:
   POST /transacoes/acoes/adicionar
   - Direct SQLite insert
   - Manual validation
   - Simple response

2. Listing transactions:
   GET /transacoes/acoes/listar?carteira_id=1
   - Direct SQLite select
   - Simple data transformation
   - Clear response format

3. Special operations (like stock splits):
   POST /transacoes/acoes/desdobramento
   - Update existing records
   - No new tables
   - Direct SQL updates

Remember
- Keep it simple
- Follow existing patterns
- Use direct SQL
- No unnecessary abstractions
- Clear, explicit code
  